package limma.persistence;

import junit.framework.TestCase;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

public class JDBCPersistenceManagerTest extends TestCase {
    private JDBCPersistenceManager manager;
    private PersistenceConfig config;


    protected void setUp() throws Exception {
        super.setUp();
        config = new HSQLConfig();
        manager = new JDBCPersistenceManager(config, new SQLGeneratorImpl());
        manager.addPersistentClass(Product.class);

        sql("set WRITE_DELAY 0");
        sql("drop table Product");
        sql("create table Product (id bigint generated by default as identity(start with 1), name varchar)");
    }


    public void testloadAllObjects() throws Exception {
        manager.create(new Product("bike"));

        List orders = manager.loadAll(Product.class);
        assertEquals(1, orders.size());
        assertEquals("bike", ((Product) orders.get(0)).name);
        assertEquals(1, ((Product) orders.get(0)).id);
    }

    public void testCreateSetsAnIdOnObjectsReturned() throws Exception {
        Product product1 = (Product) manager.create(new Product("bike"));
        Product product2 = (Product) manager.create(new Product("bike"));
        assertEquals(1, product1.id);
        assertEquals(2, product2.id);
    }

    public static class Product {
        private long id;
        private String name;


        public Product() {
        }

        public Product(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }

    private static class HSQLConfig implements PersistenceConfig {
        public String getDriver() {
            return "org.hsqldb.jdbcDriver";
        }

        public String getUrl() {
            return "jdbc:hsqldb:file:target/testdb";
        }

        public String getUsername() {
            return "sa";
        }

        public String getPassword() {
            return "";
        }
    }

    private void sql(String sql) throws SQLException {
        try {
            Connection connection = DriverManager.getConnection(config.getUrl(), config.getUsername(), config.getPassword());
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.execute();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
